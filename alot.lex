/* lexical analyzer for aLoT */
%{
#include "y.tab.h"
%}
digit		[0-9]
letter		[A-Za-z]
underscore	_
sign		[+-]
colon		:
semicolon	;
lparanthesis	\(
rparanthesis	\)
comma		,
lbrace		\{
rbrace		\}
tilda		~
lsbracket	\[
rsbracket	\]
slash		\/
equals		=
increment	\+\+
decrement	--
plus		\+
minus		-
star		\*
percent		%
and		&&
or		\|\|
xor		\^
lessthan	<
greaterthan	>
lte		<=
gte		>=
equalsequals	==
notequal	!=
not		!
whitespace	[ \t\r]
newline		\n
unknown		.
%%
{newline}							{extern int lineno; lineno++;}
{whitespace}							;
#.*								;
{colon}								return(COLON);
{semicolon}							return(SEMICOLON);
{lparanthesis}							return(LP);
{rparanthesis}							return(RP);
{comma}								return(COMMA);
{lbrace}							return(LB);
{rbrace}							return(RB);
{tilda}								return(TILDA);
{lsbracket}							return(LSB);
{rsbracket}							return(RSB);
{equals}							return(ASSIGN_OP);
{increment}							return(INCREMENT_OP);
{decrement}							return(DECREMENT_OP);
{plus}								return(ADDITION_OP);
{minus}								return(SUBTRACTION_OP);
{star}								return(MULTIPLICATION_OP);
{slash}								return(DIVISION_OP);
{percent}							return(MOD_OP);
{and}								return(AND_OP);
{or}								return(OR_OP);
{xor}								return(XOR_OP);
{lessthan}							return(LESS_THAN_OP);
{greaterthan}							return(GREATER_THAN_OP);
{lte}								return(LESS_THAN_EQUAL_OP);
{gte}								return(GREATER_THAN_EQUAL_OP);
{equalsequals}							return(EQUAL_OP);
{notequal}							return(NOT_EQUAL_OP);
{not}								return(NOT_OP);
main								return(MAIN);
fn								return(FN);
const								return(CONST);
for								return(FOR);
while								return(WHILE);
if								return(IF);
else								return(ELSE);
break								return(BREAK);
return								return(RETURN);
on								return(ON);
off								return(OFF);
\<\<								return(READ);
\>\>								return(WRITE);
TIMER								return(TIMER);
CONNECTED_DEV							return(CONNECTED_DEV);
TEMPERATURE							return(TEMPERATURE);
HUMIDITY							return(HUMIDITY);
AIRPRESSURE							return(AIRPRESSURE);
AIRQUALITY							return(AIRQUALITY);
LIGHT								return(LIGHT);
SOUND								return(SOUND);
sw1								return(SW1);
sw2								return(SW2);
sw3								return(SW3);
sw4								return(SW4);
sw5								return(SW5);
sw6								return(SW6);
sw7								return(SW7);
sw8								return(SW8);
sw9								return(SW9);
sw10								return(SW10);
(true|false)							return(BOOLEAN);
{sign}?{digit}*(\.){digit}+					return(FLOAT);
{sign}?{digit}*							return(INTEGER);
\".*\"								return(STRING);
({letter}|{underscore})({letter}|{digit}|{underscore})*		return(IDENTIFIER);
{unknown}							;
%%
int yywrap() { return 1; }
